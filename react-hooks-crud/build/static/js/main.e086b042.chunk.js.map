{"version":3,"sources":["http-common.js","services/ProductService.js","components/AddProduct.js","components/Product.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","data","http","post","AddProduct","initialProductState","id","name","description","price","color","size","useState","product","setProduct","submitted","setSubmitted","handleInputChange","event","target","value","className","onClick","htmlFor","type","required","onChange","ProductDataService","then","response","console","log","catch","e","Product","props","App","href","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e086b042.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: process.env.NODE_ENV\n    ? \"https://morning-hollows-26967.herokuapp.com/api\"\n    : \"http://localhost:8080/api\",\n  headers: {\n    \"Content-type\": \"application/json\",\n  },\n});\n","import http from \"../http-common\";\n\nconst getAll = () => {\n  return http.get(\"/products\");\n};\n\nconst get = (id) => {\n  return http.get(`/products/${id}`);\n};\n\nconst create = (data) => {\n  return http.post(\"/products\", data);\n};\n\nconst findByTitle = (title) => {\n  return http.get(`/products?title=${title}`);\n};\n\nexport default {\n  getAll,\n  get,\n  create,\n  findByTitle,\n};\n","import React, { useState } from \"react\";\nimport ProductDataService from \"../services/ProductService\";\n\nconst AddProduct = () => {\n  const initialProductState = {\n    id: null,\n    name: \"\",\n    description: \"\",\n    price: 0,\n    color: \"\",\n    size: \"\",\n  };\n  const [product, setProduct] = useState(initialProductState);\n  const [submitted, setSubmitted] = useState(false);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setProduct({ ...product, [name]: value });\n  };\n\n  const saveProduct = () => {\n    var data = {\n      name: product.name,\n      description: product.description,\n      price: product.price,\n      color: product.color,\n      size: product.size,\n    };\n\n    ProductDataService.create(data)\n      .then((response) => {\n        setProduct({\n          id: response.data.id,\n          name: response.data.name,\n          description: response.data.description,\n          price: response.data.price,\n          color: response.data.color,\n          size: response.data.size,\n        });\n        setSubmitted(true);\n        console.log(response.data);\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  };\n\n  const newProduct = () => {\n    setProduct(initialProductState);\n    setSubmitted(false);\n  };\n\n  return (\n    <div className=\"submit-form\">\n      {submitted ? (\n        <div>\n          <h4>You submitted successfully!</h4>\n          <button className=\"btn btn-success\" onClick={newProduct}>\n            Add\n          </button>\n        </div>\n      ) : (\n        <div>\n          <div className=\"form-group\">\n            <label htmlFor=\"name\">Name</label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"name\"\n              required\n              value={product.name}\n              onChange={handleInputChange}\n              name=\"name\"\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"description\">Description</label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"description\"\n              required\n              value={product.description}\n              onChange={handleInputChange}\n              name=\"description\"\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"price\">Price</label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"price\"\n              required\n              value={product.price}\n              onChange={handleInputChange}\n              name=\"price\"\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"color\">Color</label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"color\"\n              required\n              value={product.color}\n              onChange={handleInputChange}\n              name=\"color\"\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"size\">Size</label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"size\"\n              required\n              value={product.size}\n              onChange={handleInputChange}\n              name=\"size\"\n            />\n          </div>\n\n          <button onClick={saveProduct} className=\"btn btn-success\">\n            Submit\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AddProduct;\n","import React, { useState, useEffect } from \"react\";\nimport ProductDataService from \"../services/ProductService\";\n\nconst Product = (props) => {\n  const initialProductState = {\n    id: null,\n    name: \"\",\n    description: \"\",\n    price: 0,\n    color: \"\",\n    size: \"\",\n  };\n  const [currentProduct, setCurrentProduct] = useState(initialProductState);\n  const [message, setMessage] = useState(\"\");\n\n  const getProduct = (id) => {\n    ProductDataService.get(id)\n      .then((response) => {\n        setCurrentProduct(response.data);\n        console.log(response.data);\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  };\n};\n\nexport default Product;\n","import React from \"react\";\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nimport AddProduct from \"./components/AddProduct\";\nimport Product from \"./components/Product\";\n// import ProductsList from \"./components/ProductsList\";\n\nfunction App() {\n  return (\n    <div>\n      <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n        <a href=\"/products\" className=\"navbar-brand\">\n          Daniel Wellington\n        </a>\n        <div className=\"navbar-nav mr-auto\">\n          <li className=\"nav-item\">\n            <Link to={\"/products\"} className=\"nav-link\">\n              Products\n            </Link>\n          </li>\n          <li className=\"nav-item\">\n            <Link to={\"/add\"} className=\"nav-link\">\n              Add\n            </Link>\n          </li>\n        </div>\n      </nav>\n\n      <div className=\"container mt-3\">\n        <Switch>\n          {/* <Route exact path={[\"/\", \"/products\"]} component={ProductsList} /> */}\n          <Route exact path=\"/add\" component={AddProduct} />\n          <Route path=\"/products/:id\" component={Product} />\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}